<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('CustomerGroup', 'doctrine');

/**
 * BaseCustomerGroup
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $ckode_customer
 * @property integer $group_id
 * @property TblCustomer $TblCustomer
 * @property Cgroup $Cgroup
 * 
 * @method string        getCkodeCustomer()  Returns the current record's "ckode_customer" value
 * @method integer       getGroupId()        Returns the current record's "group_id" value
 * @method TblCustomer   getTblCustomer()    Returns the current record's "TblCustomer" value
 * @method Cgroup        getCgroup()         Returns the current record's "Cgroup" value
 * @method CustomerGroup setCkodeCustomer()  Sets the current record's "ckode_customer" value
 * @method CustomerGroup setGroupId()        Sets the current record's "group_id" value
 * @method CustomerGroup setTblCustomer()    Sets the current record's "TblCustomer" value
 * @method CustomerGroup setCgroup()         Sets the current record's "Cgroup" value
 * 
 * @package    POSLoketPelangi
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseCustomerGroup extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('customer_group');
        $this->hasColumn('ckode_customer', 'string', 11, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => false,
             'length' => 11,
             ));
        $this->hasColumn('group_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('TblCustomer', array(
             'local' => 'ckode_customer',
             'foreign' => 'ckode_customer'));

        $this->hasOne('Cgroup', array(
             'local' => 'group_id',
             'foreign' => 'id'));
    }
}